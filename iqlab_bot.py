import telebot
from telebot import types
from datetime import datetime, timedelta

API_TOKEN = '–¢–í–û–ô_–¢–û–ö–ï–ù_–¢–£–¢'
CHANNEL_ID = '@—Ç–≤—ñ–π_–∫–∞–Ω–∞–ª_–∞–±–æ_chat_id'  # –∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –∑–∞–ø–∏—Å—å

bot = telebot.TeleBot(API_TOKEN)

OFFICE_INFO = """
üè• *–ú–µ–¥–∏—á–Ω–∏–π –æ—Ñ—ñ—Å*
üìç –î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å, –º. –ü—ñ–¥–≥–æ—Ä–æ–¥–Ω–µ
üìå –≤—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞, 43–±

üïí *–ß–∞—Å —Ä–æ–±–æ—Ç–∏:*
–ü–ù-–ü–¢: 7:00 - 13:00  
–ó–∞–±—ñ—Ä –±—ñ–æ–º–∞—Ç–µ—Ä—ñ–∞–ª—É: 7:00 - 11:00

–°–ë: 8:00 - 13:00  
–ó–∞–±—ñ—Ä –±—ñ–æ–º–∞—Ç–µ—Ä—ñ–∞–ª—É: 8:00 - 11:00

–ù–î: –í–∏—Ö—ñ–¥–Ω–∏–π
"""

# –ü—Ä–∏–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∞–Ω–∞–ª–∏–∑–æ–≤ ‚Äî –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –Ω–∞ —Å–≤–æ–∏
CATEGORIES = {
    "–ó–∞–≥–∞–ª—å–Ω—ñ –∞–Ω–∞–ª—ñ–∑–∏": ["–ó–∞–≥–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫—Ä–æ–≤—ñ", "–ó–∞–≥–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–µ—á—ñ"],
    "–ë—ñ–æ—Ö—ñ–º—ñ—è": ["–ì–ª—é–∫–æ–∑–∞", "–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω"],
    "–Ü–Ω—à—ñ": ["–¢–µ—Å—Ç –Ω–∞ –≤–∞–≥—ñ—Ç–Ω—ñ—Å—Ç—å", "–ê–Ω–∞–ª—ñ–∑ –Ω–∞ –≥–æ—Ä–º–æ–Ω–∏"]
}

# –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–¥–µ—Å—å (–¥–ª—è demo)
user_data = {}
queue_number = 1  # —Å—á–µ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏

def get_dates_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=3)
    for i in range(7):
        date = datetime.now() + timedelta(days=i)
        text = date.strftime("%d.%m.%Y")
        callback_data = f"date_{text}"
        markup.add(types.InlineKeyboardButton(text=text, callback_data=callback_data))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    return markup

def get_categories_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    for cat in CATEGORIES.keys():
        markup.add(types.InlineKeyboardButton(cat, callback_data=f"category_{cat}"))
    return markup

def get_analysis_keyboard(category):
    markup = types.InlineKeyboardMarkup(row_width=1)
    for anal in CATEGORIES[category]:
        markup.add(types.InlineKeyboardButton(anal, callback_data=f"analysis_{anal}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    return markup

def get_confirm_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_analysis"))
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    global queue_number
    user_data[message.chat.id] = {}
    bot.send_message(message.chat.id, OFFICE_INFO, parse_mode='Markdown')
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–Ω–∞–ª—ñ–∑—ñ–≤:", reply_markup=get_categories_keyboard())

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    global queue_number
    chat_id = call.message.chat.id

    if call.data.startswith("category_"):
        category = call.data.split("category_")[1]
        user_data[chat_id]['category'] = category
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                              text=f"–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è:", reply_markup=get_dates_keyboard())

    elif call.data.startswith("date_"):
        date = call.data.split("date_")[1]
        user_data[chat_id]['date'] = date
        category = user_data[chat_id].get('category')
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                              text=f"–û–±–µ—Ä—ñ—Ç—å –∞–Ω–∞–ª—ñ–∑ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó *{category}*:", parse_mode='Markdown',
                              reply_markup=get_analysis_keyboard(category))

    elif call.data.startswith("analysis_"):
        analysis = call.data.split("analysis_")[1]
        user_data[chat_id]['analysis'] = analysis
        date = user_data[chat_id].get('date')
        category = user_data[chat_id].get('category')
        text = (f"–í–∏ –æ–±—Ä–∞–ª–∏:\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: *{category}*\n–î–∞—Ç–∞: *{date}*\n–ê–Ω–∞–ª—ñ–∑: *{analysis}*\n\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏¬ª, —â–æ–± –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è.")
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                              text=text, parse_mode='Markdown', reply_markup=get_confirm_keyboard())

    elif call.data == "confirm":
        # –ü—Ä–∏—Å–≤–æ—é—î–º–æ –Ω–æ–º–µ—Ä —á–µ—Ä–≥–∏
        number = queue_number
        queue_number += 1

        category = user_data[chat_id].get('category')
        date = user_data[chat_id].get('date')
        analysis = user_data[chat_id].get('analysis')

        ticket_text = (f"–ù–æ–º–µ—Ä —á–µ—Ä–≥–∏: *{number}*\n"
                       f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n"
                       f"–î–∞—Ç–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è: {date}\n"
                       f"–ê–Ω–∞–ª—ñ–∑: {analysis}\n"
                       f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{call.from_user.username if call.from_user.username else call.from_user.first_name}")

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                              text="–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n" + ticket_text, parse_mode='Markdown')

        # –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞–ª–æ–Ω—É –≤ –∫–∞–Ω–∞–ª
        bot.send_message(CHANNEL_ID, ticket_text, parse_mode='Markdown')

        # –û—á–∏—â—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_data.pop(chat_id, None)

    elif call.data == "back_to_categories":
        user_data[chat_id].pop('category', None)
        user_data[chat_id].pop('date', None)
        user_data[chat_id].pop('analysis', None)
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                              text="–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–Ω–∞–ª—ñ–∑—ñ–≤:", reply_markup=get_categories_keyboard())

    elif call.data == "back_to_analysis":
        category = user_data[chat_id].get('category')
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                              text=f"–û–±–µ—Ä—ñ—Ç—å –∞–Ω–∞–ª—ñ–∑ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó *{category}*:", parse_mode='Markdown',
                              reply_markup=get_analysis_keyboard(category))

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    bot.infinity_polling()




