import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import requests
from bs4 import BeautifulSoup
from datetime import datetime, timedelta

TOKEN = '8207596553:AAH8wcoqshmnUwS1Zrq_rL3e_LnrLPnW6mg'
ADMIN_CHAT_ID = '1002738907591'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID

bot = telebot.TeleBot(TOKEN)

BASE_URL = 'https://iqlab.com.ua/catalog'
user_state = {}
user_selection = {}

OFFICE_INFO = """
üè• *–ú–µ–¥–∏—á–Ω–∏–π –æ—Ñ—ñ—Å*
üìç –î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å, –º. –ü—ñ–¥–≥–æ—Ä–æ–¥–Ω–µ
üìå –≤—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞, 43–±

üïí *–ß–∞—Å —Ä–æ–±–æ—Ç–∏:*
–ü–ù-–ü–¢: 7:00 - 13:00  
–ó–∞–±—ñ—Ä –±—ñ–æ–º–∞—Ç–µ—Ä—ñ–∞–ª—É: 7:00 - 11:00

–°–ë: 8:00 - 13:00  
–ó–∞–±—ñ—Ä –±—ñ–æ–º–∞—Ç–µ—Ä—ñ–∞–ª—É: 8:00 - 11:00

–ù–î: –í–∏—Ö—ñ–¥–Ω–∏–π
"""

def get_categories():
    r = requests.get(BASE_URL)
    soup = BeautifulSoup(r.text, 'html.parser')
    categories = []

    for link in soup.select('a.catalog-section__link'):
        name = link.get_text(strip=True)
        href = link.get('href')
        if name and href:
            categories.append({
                'name': name,
                'url': 'https://iqlab.com.ua' + href
            })

    return categories


def get_tests(url):
    r = requests.get(url)
    soup = BeautifulSoup(r.text, 'html.parser')
    rows = soup.select('table.table > tbody > tr')
    tests = []
    for row in rows:
        cols = row.find_all('td')
        if len(cols) >= 3:
            tests.append({
                'name': cols[0].text.strip(),
                'term': cols[1].text.strip(),
                'price': cols[2].text.strip()
            })
    return tests

def kb(items):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for item in items:
        markup.add(KeyboardButton(item))
    return markup

@bot.message_handler(commands=['start'])
def start(m):
    uid = m.chat.id
    user_state[uid] = 'cat'
    user_selection[uid] = {'tests': []}
    cats = get_categories()
    if not cats:
        return bot.send_message(uid, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    user_selection[uid]['cats'] = cats
    bot.send_message(uid, "üëã –í—ñ—Ç–∞—î–º–æ —É Telegram-–±–æ—Ç—ñ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—ó!")
    bot.send_message(uid, OFFICE_INFO, parse_mode="Markdown")
    bot.send_message(uid, "üîΩ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb([c['name'] for c in cats]))

@bot.message_handler(func=lambda m: user_state.get(m.chat.id) == 'cat')
def cat(m):
    uid = m.chat.id
    cat = next((c for c in user_selection[uid]['cats'] if c['name'] == m.text), None)
    if not cat:
        return bot.send_message(uid, "‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É.")
    user_selection[uid]['cat'] = cat
    tests = get_tests(cat['url'])
    user_selection[uid]['all_tests'] = tests
    user_state[uid] = 'test'
    bot.send_message(uid, "üß™ –û–±–µ—Ä—ñ—Ç—å –∞–Ω–∞–ª—ñ–∑ (–ø–æ –æ–¥–Ω–æ–º—É). –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ì–æ—Ç–æ–≤–æ'", reply_markup=kb([t['name'] for t in tests[:20]] + ['–ì–æ—Ç–æ–≤–æ']))

@bot.message_handler(func=lambda m: user_state.get(m.chat.id) == 'test')
def test(m):
    uid = m.chat.id
    if m.text == '–ì–æ—Ç–æ–≤–æ':
        if not user_selection[uid]['tests']:
            return bot.send_message(uid, "‚ö†Ô∏è –û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∞–Ω–∞–ª—ñ–∑.")
        user_state[uid] = 'date'
        today = datetime.today()
        dates = [(today + timedelta(days=i)).strftime('%Y-%m-%d') for i in range(30)]
        return bot.send_message(uid, "üìÖ –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è:", reply_markup=kb(dates))
    test = next((t for t in user_selection[uid]['all_tests'] if t['name'] == m.text), None)
    if test and test not in user_selection[uid]['tests']:
        user_selection[uid]['tests'].append(test)
        bot.send_message(uid, f"‚úÖ –î–æ–¥–∞–Ω–æ: {test['name']}")
    else:
        bot.send_message(uid, "üß™ –û–±–µ—Ä—ñ—Ç—å –∞–Ω–∞–ª—ñ–∑ —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ì–æ—Ç–æ–≤–æ'.")

@bot.message_handler(func=lambda m: user_state.get(m.chat.id) == 'date')
def date(m):
    uid = m.chat.id
    try:
        d = datetime.strptime(m.text, '%Y-%m-%d').date()
        if d > datetime.today().date() + timedelta(days=30):
            raise ValueError
    except:
        return bot.send_message(uid, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞. –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD.")
    user_selection[uid]['date'] = d
    tests = user_selection[uid]['tests']
    msg = "\n".join([f"- {t['name']} (–°—Ä–æ–∫: {t['term']}, –¶—ñ–Ω–∞: {t['price']})" for t in tests])
    date_str = d.strftime('%Y-%m-%d')
    final = f"üóì *–ó–∞–ø–∏—Å –Ω–∞ {date_str}*\n{msg}"
    bot.send_message(uid, OFFICE_INFO, parse_mode="Markdown")
    bot.send_message(uid, final, parse_mode="Markdown", reply_markup=ReplyKeyboardRemove())

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    user = m.from_user
    admin_msg = (
        f"üì• –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\n"
        f"üë§ {user.first_name} (@{user.username or '‚Äî'})\n"
        f"üóì {date_str}\n"
        f"{msg}"
    )
    bot.send_message(ADMIN_CHAT_ID, admin_msg)

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_state.pop(uid)
    user_selection.pop(uid)

bot.polling()

